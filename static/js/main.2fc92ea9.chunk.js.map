{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","react_default","a","createElement","src","alt","MovieGenres","_ref3","genres","className","MovieSynopsis","_ref4","synopsis","lib_default","text","maxLine","ellipsis","trimRight","basedOn","Movie","_ref","title","map","index","key","App","state","greeting","time","_setTimeout","setTimeout","_this","_setGreeting","greet","setState","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_callApi","sent","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","medium_cover_image","id","_renderGreeting","_this2","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fc92ea9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n// class Movie extends Component {\r\n\r\n//     static propTypes = {\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>{this.props.title}</h1>\r\n//                 <MoviePoster poster={this.props.poster}/>\r\n                \r\n//             </div>\r\n//         ) \r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component {\r\n\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"movie poster\"/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genres, index) => {\r\n                        return <MovieGenres genres={genres} key={index}/>\r\n                        }\r\n                    )}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <MovieSynopsis synopsis={synopsis}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nfunction MoviePoster({poster}){\r\n    return(\r\n        <img src={poster} alt=\"movie poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenres({genres}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genres}</span>\r\n    )\r\n}\r\n\r\nfunction MovieSynopsis({synopsis}){\r\n    return(\r\n        <LinesEllipsis\r\n        text={synopsis}\r\n        maxLine='3'\r\n        ellipsis='......'\r\n        trimRight\r\n        basedOn='letters'\r\n        /> \r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\nclass App extends Component {\n\n  state = {\n    greeting : 'Loading',\n    time : 500\n  }\n\n  componentDidMount(){\n\n    // setTimeout(() => {\n    //   this._setGreeting()\n    //   setTimeout(() => {\n    //     this._setGreeting()\n    //     setTimeout(() => {\n    //       this._setGreeting()\n    //       setTimeout(() => {\n    //         this._setGreeting()\n    //       }, 1000)\n    //     }, 1000)\n    //   }, 1000)\n    // }, 1000)\n\n    this._setTimeout()\n\n    setTimeout(() => {\n      this.setState(\n        this._getMovies()\n      )\n    }, 5000)\n  }\n\n  _setTimeout = (time) => {\n    let interval = time + 500\n    setTimeout(() => {\n      this._setGreeting()\n    }, interval)\n  }\n\n  _setGreeting = () => {\n    this._setTimeout(this.state.time)\n    let str = this.state.greeting\n    let greet = str + \".\"\n    this.setState({\n      greeting : greet\n    })\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies \n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then((response) => response.json())\n    .then((response) => response.data.movies)\n    .catch((err) => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie title={movie.title} poster={movie.medium_cover_image} key={movie.id} genres={movie.genres} synopsis={movie.synopsis}/>\n    })\n    return movies\n  }\n\n  _renderGreeting = () => {\n    const greeting = this.state.greeting\n    return greeting\n  }\n\n  render() {\n    const {movies} = this.state\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : this._renderGreeting()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}